from io import StringIO

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from scipy.stats import wilcoxon

csv_data = """y_true,Baseline,Deep model,Model based image features,ResNet50,Unet3D-Encoder,VisonTransformer3D,3D-FuseNet (Ours)
199,591.1055,465.8731051,433.7482926,335.0856476,439.2863789,330.7939971,396.7070962
880,654.5629,465.8731051,394.178364,342.3496966,408.082343,319.361059,473.6068907
155.00002,424.07007,465.8731051,369.4144013,263.5611961,267.5408897,314.7226945,338.2528272
372,467.6963,465.8731051,415.8971659,399.4187764,438.9145514,313.3387219,294.3186078
903,974.67737,388.9060323,389.5353922,330.4167715,435.892528,445.0165189,512.1466507
119.999985,394.07227,457.6812057,392.6362612,313.5117635,376.575524,364.8748778,342.0854965
80.000015,716.52057,409.6770933,394.629904,273.3843749,282.21571,331.2618472,545.5515342
486,460.3153,433.9402309,420.522492,465.2422428,409.9678269,381.0251922,311.5955561
370,700.1613,465.8731051,435.6717778,338.9832417,438.5368018,358.9639688,405.4869931
1731,554.7158,465.8731051,424.891544,328.4553336,417.0183483,314.8820995,350.7616596
510,522.37616,465.8731051,435.123533,543.8933116,428.1025739,384.1301319,479.3845624
1096,435.58386,465.8731051,434.7150156,327.9160681,438.4182822,400.6491632,515.8721687
319,533.92096,462.7041738,407.8171048,312.5778084,349.372972,413.9398999,413.4401326
56.000015,265.0971,363.7880069,326.0632671,168.0977646,242.1970488,315.8678666,163.844124
442,590.4779,465.8731051,427.513659,475.7738252,438.3397269,382.6741297,476.4972683
822,607.0597,465.8731051,422.6809103,354.5789976,439.1244288,325.604657,434.1198064
436,705.8845,308.239247,385.9480353,120.0305047,200.0534943,319.4146798,499.7544965
353,402.8496,429.0464311,402.160414,394.3969969,388.2655866,357.334493,262.6541769
540,476.88898,465.8731051,416.1484496,355.7304419,438.5373903,407.961778,509.4065553
538,570.86835,465.8731051,426.9497476,396.7164396,410.1836572,442.8492874,478.9548833
203,579.75696,419.1463691,407.9781725,330.9374421,288.0980302,316.5078678,451.0343749
12.000015,371.02405,461.0910416,388.6496052,300.2083701,343.9271985,339.861203,262.6131204
495,415.97424,465.8731051,419.8895025,163.2550532,339.0995654,315.1909115,371.6172245
614,629.2634,465.8731051,414.044941,289.851511,413.7846333,374.9672403,420.6000873
21.999985,426.11243,431.0744471,420.1047056,276.1302421,326.2015534,384.7732226,304.2833505
448,618.79254,465.8731051,430.7683785,294.1092028,369.8728012,445.1607879,452.9534853
289,472.10785,415.5723436,389.6816071,347.0090825,321.0182066,391.0843228,357.7414375
291,340.07385,436.5979412,395.9228933,464.7594341,354.416131,319.3400114,382.3640447
187.00002,173.97577,405.4050278,357.5901917,288.2991255,424.9961871,409.6094883,247.3594902
467,437.93597,465.8731051,374.3340415,885.6484399,436.7022115,424.4646635,402.3259797
142.00002,289.57037,457.0814821,392.8339541,314.6996044,336.3829779,337.046968,277.1111738
175.00002,419.96826,399.1370977,382.5686796,397.1112319,439.1734255,482.5921283,411.4610874
616,556.7833,445.1763255,421.3632202,330.652721,435.2514186,401.128354,425.7362463
1076,507.86774,465.8731051,424.6559305,449.6102288,438.8819284,350.3684831,375.4236423
85.999985,482.2976,465.8731051,406.3685012,405.8416442,240.3345774,321.1004407,339.2812386
98.999985,334.8385,388.7665703,393.579588,338.8128263,338.2667608,318.640475,277.372005
812,391.67426,465.8731051,380.3826267,394.5328766,312.3745636,320.0874321,372.98764
21.000015,205.57648,345.0282312,372.3731712,202.9391727,224.4984362,314.4636512,214.0188918
287,393.77277,465.8731051,378.2627091,528.709819,432.9871226,473.7702278,260.6185285
430,422.99384,438.8217082,412.8981255,414.7788506,293.2728869,319.944626,318.0350679
698,480.05908,433.3226094,416.9867567,362.7784311,420.2434053,446.7434539,375.5972207
405,568.09863,465.8731051,385.7159349,277.0783281,438.6064773,397.1269864,475.8077922
375,615.76697,465.8731051,441.0649021,770.6571502,439.8883389,390.9727953,465.6722313
342,379.79102,386.6176835,339.970939,330.8000011,285.3609097,322.3603946,287.9853476
317,404.0658,368.8983797,421.1551347,345.0281563,204.345562,294.0301786,265.6191597
1489,522.2706,465.8731051,412.4624351,643.1837897,397.2068518,326.0818363,293.7430784
300,466.56268,465.8731051,417.9933209,375.5456192,438.6353616,425.281808,395.7923965
355,382.11444,465.8731051,419.4591673,1050.236626,438.8253663,482.7416716,452.3473052"""

df = pd.read_csv(StringIO(csv_data))
df = df.drop(columns=['y_true'])

columns = df.columns
n = len(columns)
p_values = np.ones((n, n))

for i in range(n):
    for j in range(i + 1, n):
        col1, col2 = columns[i], columns[j]
        stat, p = wilcoxon(df[col1], df[col2])
        p_values[i, j] = p
        p_values[j, i] = p

p_values = np.clip(p_values, 1e-10, 1)
log_p_values = -np.log10(p_values)
log_p_values_df = pd.DataFrame(log_p_values, index=columns, columns=columns)

mask = np.triu(np.ones_like(log_p_values_df, dtype=bool), k=1)

plt.figure(figsize=(10, 5))
sns.set(font="Times New Roman", font_scale=1)

ax = sns.heatmap(
    log_p_values_df,
    mask=mask,
    annot=True,
    fmt=".2f",
    cmap="Blues",
    cbar_kws={'label': '-log10(p-value)'},
    square=True
)

# Add green stars for p < 0.05 (i.e. -log10(p) > 1.3), centered perfectly
# for i in range(n):
#     for j in range(n):
#         if mask[i, j]:
#             continue
#         value = log_p_values_df.iloc[i, j]
#         if value > -np.log10(0.05):
#             ax.text(j, i, 'â˜…',
#                     color='green', fontsize=18, ha='center', va='center', weight='bold')

# plt.title("Wilcoxon Signed-Rank Test -log10(P-Value) Matrix (Lower Triangle with Diagonal)",
#           fontsize=16, pad=20, fontfamily="Times New Roman")
# plt.xlabel("Models", fontsize=14, fontfamily="Times New Roman")
# plt.ylabel("Models", fontsize=14, fontfamily="Times New Roman")
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.savefig("wilcoxon_log_pvalue_heatmap_lower_triangle_with_diagonal.png", dpi=300, bbox_inches='tight')
plt.show()

print("\n-log10(P-Value) Matrix (Excluding y_true):")
print(log_p_values_df)